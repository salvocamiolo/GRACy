# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '../Dropbox/Projects/GRACy/GRACy_UI/annotation.ui'
#
# Created by: PyQt5 UI code generator 5.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog 
from PyQt5.QtWidgets import QInputDialog
import sys
from Bio import SeqIO
from Bio.Seq import Seq
from Bio import pairwise2
import time
import os
from os import listdir
from os.path import isfile, join
import time

class Ui_Form(object):
	def setupUi(self, Form,installationDirectory):
		Form.setObjectName("Form")
		Form.resize(833, 560)
		self.label = QtWidgets.QLabel(Form)
		self.label.setGeometry(QtCore.QRect(20, 10, 311, 20))
		self.label.setObjectName("label")
		self.label_2 = QtWidgets.QLabel(Form)
		self.label_2.setGeometry(QtCore.QRect(20, 200, 311, 20))
		self.label_2.setObjectName("label_2")
		self.outputFolderEntry = QtWidgets.QLineEdit(Form)
		self.outputFolderEntry.setGeometry(QtCore.QRect(20, 220, 671, 32))
		self.outputFolderEntry.setObjectName("outputFolderEntry")
		self.inputFileButton = QtWidgets.QPushButton(Form)
		self.inputFileButton.setGeometry(QtCore.QRect(700, 30, 112, 32))
		self.inputFileButton.setObjectName("inputFileButton")
		self.outputFolderButton = QtWidgets.QPushButton(Form)
		self.outputFolderButton.setGeometry(QtCore.QRect(700, 220, 112, 32))
		self.outputFolderButton.setObjectName("outputFolderButton")
		self.label_3 = QtWidgets.QLabel(Form)
		self.label_3.setGeometry(QtCore.QRect(20, 280, 76, 20))
		self.label_3.setObjectName("label_3")
		self.logArea = QtWidgets.QTextEdit(Form)
		self.logArea.setGeometry(QtCore.QRect(20, 300, 571, 241))
		self.logArea.setObjectName("logArea")
		self.label_4 = QtWidgets.QLabel(Form)
		self.label_4.setGeometry(QtCore.QRect(610, 300, 201, 201))
		self.label_4.setText("")
		self.label_4.setPixmap(QtGui.QPixmap(installationDirectory+"src/GUI/IconsFinal/Annotation.jpg"))
		self.label_4.setObjectName("label_4")
		self.runButton = QtWidgets.QPushButton(Form)
		self.runButton.setGeometry(QtCore.QRect(610, 510, 201, 32))
		self.runButton.setObjectName("runButton")
		self.selectedFilesArea = QtWidgets.QTextEdit(Form)
		self.selectedFilesArea.setGeometry(QtCore.QRect(20, 30, 671, 161))
		self.selectedFilesArea.setObjectName("selectedFilesArea")

		self.retranslateUi(Form)
		QtCore.QMetaObject.connectSlotsByName(Form)

		#Addition to GUI generated by Qt designer

		self.inputFileButton.clicked.connect(self.selectFiles)
		self.runButton.clicked.connect(self.runAnnotation)
		self.outputFolderButton.clicked.connect(self.selectOutputFolder)


	confFiles = []

	def selectFiles(self):
		filenames, __ = QFileDialog.getOpenFileNames(None,"Select configuration file list","./","*.fasta *.fa *.fas")
		for filename in filenames:
			self.selectedFilesArea.append((filename.split("/"))[-1])
		self.confFiles = filenames


	def refreshTextArea(self,selected):
		self.selectedFilesArea.clear()
		for item in self.confFiles:
			if (item.split("/"))[-1] == selected:
				self.selectedFilesArea.append((item.split("/"))[-1]+"  <---")
			else:
				self.selectedFilesArea.append((item.split("/"))[-1])


	def selectOutputFolder(self):
		folderName = QFileDialog.getExistingDirectory(None, "Select output folder","./")
		self.outputFolderEntry.setText(folderName)

	def reverseComplement(self,sequence):
		outSequence = ""
		accepted = ["A","C","T","G","a","c","t","g","N","n"]
		for a in range(len(sequence)-1,-1,-1):
			if sequence[a]=="A" or sequence[a]=="a":
				outSequence+="T"
			elif sequence[a]=="T" or sequence[a]=="t":
				outSequence+="A"
			elif sequence[a]=="G" or sequence[a]=="g":
				outSequence+="C"
			elif sequence[a]=="C" or sequence[a]=="c":
				outSequence+="G"
			else:
				outSequence+="N"
			

		return outSequence

	def checkCDS(self,cds):
		for a in range(0,len(cds)-3,+3):
			if cds[a:a+3] == "TAA" or cds[a:a+3] == "TGA" or cds[a:a+3] == "TAG":
				return "Stop codon in CDS"
		if not float(len(cds))%3.0==0:
			return "Not multiple of 3 coding sequence length"

	def runAnnotation(self):

		#**************************************************************************
		#***************** Main Annotation Algorithm Start ************************
		#**************************************************************************

		outputFolder = self.outputFolderEntry.text()
		if str(self.selectedFilesArea.toPlainText) == "":
			msg = QMessageBox()
			msg.setIcon(QMessageBox.Warning)
			msg.setText("No genome files has been selected.")
			msg.setWindowTitle("Warning")
			msg.setDetailedText("You should select at least one genome sequence to annotate in fasta format.\n ")
			msg.setStandardButtons(QMessageBox.Ok)
			msg.exec_()
			return

		outputFolder = self.outputFolderEntry.text()
		if outputFolder == "No folder selected":
			msg = QMessageBox()
			msg.setIcon(QMessageBox.Warning)
			msg.setText("An output folder should be selected.")
			msg.setWindowTitle("Warning")
			msg.setDetailedText("You should open the folder where all the produced output files will be saved")
			msg.setStandardButtons(QMessageBox.Ok)
			msg.exec_()
			return



		for file2Annotate in self.confFiles:

			file2AnnotateName = (file2Annotate.split("/"))[-1]
			self.refreshTextArea(file2AnnotateName)
			
			self.logArea.append("Starting annotation on sample "+file2AnnotateName+"....\n")
			self.logArea.repaint()
			
			
			

			genomeName = file2Annotate
			prot2map = []
			suffixName = (genomeName.split("/"))[-1]

			gffFile = open(suffixName+"_annotation.gff","w") #To change from the command line
			warnFile = open(suffixName+"_annotationWarnings.txt","w") #To change from the command line
			cdsFile = open(suffixName+"_cds.fasta","w") #To change from the command line
			protFile = open(suffixName+"_proteins.fasta","w") #To change from the command line


			os.system("rm -f "+installationDirectory+"src/scripts/annotation/proteinDB/._*")

			for seq_record in SeqIO.parse(genomeName,"fasta"):
				genomeSeq = str(seq_record.seq)
				assemblyName = str(seq_record.id)


			onlyfiles = [f for f in listdir(installationDirectory+"src/scripts/annotation/proteinDB/") if isfile(join(installationDirectory+"src/scripts/annotation/proteinDB/", f))]
			for f in onlyfiles:
				if f[-13:] == "_models.fasta":
					prot2map.append(f)

			for f in prot2map:
				numCodonRefines = 0
				#Find the best model for the gene *********************************************************
				locus = f.replace("_models.fasta","")
				protSeqs = SeqIO.to_dict(SeqIO.parse(installationDirectory+"src/scripts/annotation/proteinDB/"+f,"fasta"))
				#print "Choosing best match for protein",f
				
				self.logArea.append("\nSearching best match of "+f+" for "+file2AnnotateName+"....\n")
				self.logArea.repaint()
				
				
				

				os.system(installationDirectory+"src/conda/bin/makeblastdb -dbtype nucl -in "+genomeName)
				os.system(installationDirectory+"src/conda/bin/tblastn -query "+installationDirectory +
							"src/scripts/annotation/proteinDB/"+f+" -db "+genomeName+" -outfmt 6 -max_intron_length 350000 | sort -k 12rn,12rn  > preOutputBlast.txt")
				time.sleep(1)
				os.system("head -20 preOutputBlast.txt > preOutputBlast2.txt")
				time.sleep(1)
				os.system("sort -k 3rn,3rn -k12rn,12rn preOutputBlast2.txt > outputBlast.txt")
				os.system("rm preOutputBlast.txt preOutputBlast2.txt -f ")
				blastFile = open("outputBlast.txt")
				bestCoverage = 0
				blastLine = blastFile.readline().rstrip()
				blastField = blastLine.split("\t")
				alignmentLength = int(blastField[7]) - int(blastField[6])
				bestCoverage = alignmentLength
				bestProt = blastField[0]

				for hit in range(5):
					if float(blastField[2]) > 99.8:
						break
					blastLine = blastFile.readline().rstrip()
					if not blastLine:
						break
					blastField = blastLine.split("\t")
					alignmentLength = int(blastField[7]) - int(blastField[6])
					if alignmentLength > bestCoverage:
						bestCoverage = alignmentLength
						bestProt = blastField[0]


				
				self.logArea.append("Found "+bestProt+"\n")
				self.logArea.repaint()
				
				
				
				#print "Best match in the following protein:",bestProt

				sequence = str(protSeqs[bestProt].seq)
				tempFasta = open("tempFasta.fasta","w")
				tempFasta.write(">"+locus+"\n"+str(protSeqs[bestProt].seq)+"\n")
				tempFasta.close()

				#Run Exonerate on the best model *********************************************************
				
				self.logArea.append("Retrieving model....\n")
				
				
				
				os.system(installationDirectory+"src/conda/bin/exonerate --model protein2genome tempFasta.fasta "+genomeName+" --showtargetgff -s 0 -n 1 --forcegtag --minintron 35 --maxintron 10000  >outputExonerate")



				#Check Exonerate output *****************************************************************
				#Check the proteins gave a match in the target genome
				exResult = open("outputExonerate")
				line = exResult.readline().rstrip()
				while not "Query range:" in line:
					line = exResult.readline().rstrip()
					if line is None:
						print("WARNING no protein found for ", locus)
						warnings.append("Missing gene: locus "+locus+" did not provide any alignment")
				exResult.close()


				#Reconstruct Exons  **********************************************************************
				exResult = open("outputExonerate")
				while not line == "# --- START OF GFF DUMP ---":
					line = exResult.readline().rstrip()
					if line is None:
						#print "WARNING no protein found for ", locus
						warnings.append("Missing gene: locus "+locus+" did not provide any alignment")
				for a in range(10):
					line = exResult.readline().rstrip()

				gene = {}
				exon = {}
				warnings = []
				#Collect the exonerate output
				while not line == "# --- END OF GFF DUMP ---":
					line = exResult.readline().rstrip()
					if line is None:
						#print "WARNING no protein found for ", locus
						warnings.append("Missing gene: locus "+locus+" did not provide any alignment")
					fields = line.split("\t")
					if not line == "# --- END OF GFF DUMP ---":
						if fields[2]=="gene":
							if not locus in gene:
								gene[locus] = (fields[3],fields[4],fields[6])
							else:
								if (int(fields[4]) - int(fields[3])) > (int(int(gene[locus][1])) - int(int(gene[locus][0]))):
									gene[locus] = (fields[3],fields[4],fields[6])

						if fields[2] == "exon":
							if not locus in exon:
								exon[locus] = []
							exon[locus].append((fields[3],fields[4],fields[6]))
							if "frameshifts" in fields[8]:
								warnings.append("Frameshifts in exon "+str(fields[3])+" "+str(fields[4])+" "+fields[8])

				newList = sorted(exon[locus], key=lambda x: x[1])
				exon[locus] = newList


				#Reconstruct CDS  ***********************************************************
				cdsSeq = ""
				if exon[locus][0][2]=="+":   #************* Positive strand
					for item in exon[locus]:
						cdsSeq+=genomeSeq[int(item[0])-1:int(item[1])]
					cdsSeq += genomeSeq[int(item[1]):int(item[1])+3]

				else: # *********************** Negative Strand
					for a in range(len(exon[locus])-1,-1,-1):
						cdsSeq+= self.reverseComplement(genomeSeq[ int(exon[locus][a][0])-1: int(exon[locus][a][1]) ])
					cdsSeq += self.reverseComplement(genomeSeq[int(exon[locus][a][0])-4 :int(exon[locus][a][0])-1])


				notes = ""

				# Check CDS integrity *********************************************************
				foundStartCodon = True
				foundStopCodon = True
				if not  cdsSeq[:3]=="ATG" or not (cdsSeq[-3:]=="TGA" or cdsSeq[-3:]=="TAA" or cdsSeq[-3:]=="TAG" ):

					notes = "\n"+locus+"\n"
					notes += "Either the start or the stop codon was not found. Searching nearby....\n"




					# Look for ATG at the beginning of the sequence or closely ********************
					if exon[locus][0][2]=="+":   #************* Positive strand
						if not cdsSeq[:3]=="ATG":
							foundStartCodon = False
							print("- Looking for start codon upstream....\n")
							for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
								newStart = genomeSeq[int(exon[locus][0][0])-1-a*3-3:int(exon[locus][0][0])-1-a*3]
								if newStart == "ATG":
									notes += "Valid start codon found upstream!\n"
									exon[locus][0]=(int(exon[locus][0][0])-a*3-3,exon[locus][0][1],exon[locus][0][2])
									gene[locus] = (int(exon[locus][0][0])-a*3-3,int(gene[locus][1]),gene[locus][2])
									cdsSeq = ""
									for item in exon[locus]:
										cdsSeq+=genomeSeq[int(item[0])-1:int(item[1])]
									foundStartCodon = True
									notes += "- Start codon refined  "+str(a)+" codons upstream\n"
									numCodonRefines = a
									break
								if newStart == "TGA" or newStart == "TAA" or newStart=="TAG":
									foundStartCodon = False
									notes += "- Found a stop codon while searching for start codon upstream!\nStart codon could not be found upstream\n"
									break
							#If the new start codon was not found in the region upstream then the downstream region is searched
							if foundStartCodon == False:
								notes += "- Looking for start codon downstream....\n"
								for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
									newStart = genomeSeq[int(exon[locus][0][0])-1+a*3:int(exon[locus][0][0])-1+a*3+3]
									if newStart == "ATG":
										notes += "Valid start codon found downstream!\n"
										exon[locus][0]=(int(exon[locus][0][0])+a*3,exon[locus][0][1],exon[locus][0][2])
										gene[locus] = (int(exon[locus][0][0])+a*3,int(gene[locus][1]),gene[locus][2])
										cdsSeq = ""
										for item in exon[locus]:
											cdsSeq+=genomeSeq[int(item[0])-1:int(item[1])]
										foundStartCodon = True
										notes += "- Start codon refined  "+str(a)+" codons downstream\n"
										numCodonRefines = a
										break
									if newStart == "TGA" or newStart == "TAA" or newStart=="TAG":
										foundStartCodon = False
										notes += "- Found a stop codon while searching for start codon downstream!\nStart codon could not be found downstream\n"
										break
								if foundStartCodon == False:
									notes += "Start codon could not be found at this stage\n"

					else: # *********************** Negative Strand
						if not cdsSeq[:3]=="ATG" or not (cdsSeq[:3] =="TTG" and locus=="RL6"): #RL6 start with alternative start codon
							foundStartCodon = False
							notes += "- Looking for start codon upstream....\n"
							for a in range(len(sequence)-int(int(len(cdsSeq)/3))+30):
								#print "New start codons"
								newStart = self.reverseComplement(genomeSeq[int(exon[locus][-1][1])+a*3:int(exon[locus][-1][1])+a*3+3])
								#print newStart
								if newStart == "ATG":
									notes += "Valid start codon found upstream!\n"
									exon[locus][-1]=(int(exon[locus][-1][0]),int(exon[locus][-1][1])+a*3+3,exon[locus][-1][2])
									gene[locus] = (int(gene[locus][0]),int(exon[locus][-1][1])+a*3+3,gene[locus][2])
									cdsSeq = ""
									for a1 in range(len(exon[locus])-1,-1,-1):
										cdsSeq+=self.reverseComplement(genomeSeq[ int(exon[locus][a1][0])-1: int(exon[locus][a1][1]) ])
									foundStartCodon = True
									notes += "- Start codon refined  "+str(a)+" codons upstream\n"
									numCodonRefines = a
									break
								if newStart == "TGA" or newStart == "TAA" or newStart=="TAG":
									foundStartCodon = False
									notes += "- Found a stop codon while searching for start codon upstream!\nStart codon could not be found upstream\n"
									break
						#If the new start codon was not found in the region upstream then the downstream region is searched
							if foundStartCodon == False:
								notes += "- Looking for start codon downstream....\n"

								for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
									#print "New start codons"
									newStart = self.reverseComplement(genomeSeq[int(exon[locus][-1][1])-a*3-3:int(exon[locus][-1][1])-a*3])

									#print newStart
									if newStart == "ATG":
										notes += "Valid start codon found downstream!\n"
										exon[locus][-1]=(int(exon[locus][-1][0]),int(exon[locus][-1][1])-a*3,exon[locus][-1][2])
										gene[locus] = (int(gene[locus][0]),int(exon[locus][-1][1])-a*3,gene[locus][2])
										cdsSeq = ""
										for a1 in range(len(exon[locus])-1,-1,-1):
											cdsSeq+=self.reverseComplement(genomeSeq[ int(exon[locus][a1][0])-1: int(exon[locus][a1][1]) ])
										foundStartCodon = True
										notes += "- Start codon refined  "+str(a)+" codons downstream\n"
										numCodonRefines = a
										break
								if newStart == "TGA" or newStart == "TAA" or newStart=="TAG":
									foundStartCodon = False
									notes += "- Found a stop codon while searching for start codon downstream! \nStart codon could not be found downstream\n"
									break

								if foundStartCodon == False:
									notes += "Start codon could not be found at this stage\n"




					# Look for Stop codon at the end of the sequence or closely ********************
					if exon[locus][0][2]=="+":   #************* Positive strand
						#print "We start from", cdsSeq[-3:]
						if not cdsSeq[-3:]=="TGA" and not cdsSeq[-3:]=="TAA" and not cdsSeq[-3:]=="TAG":
							notes += "- Looking for stop codon downstream....\n"
							foundStopCodon = False
							for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
								newStop = genomeSeq[int(exon[locus][-1][1])+a*3:int(exon[locus][-1][1])+a*3+3]
								if newStop == "TAA" or newStop=="TGA" or newStop=="TAG":
									notes += "Valid stop codon found downstream\n"
									exon[locus][0]=(int(exon[locus][0][0]),int(exon[locus][-1][1])+a*3,exon[locus][0][2])
									gene[locus] = (int(gene[locus][0]), int(exon[locus][-1][1])+a*3, gene[locus][2])
									cdsSeq = ""
									for item in exon[locus]:
										cdsSeq+=genomeSeq[int(item[0])-1:int(item[1])]
									foundStopCodon = True
									notes += "- Stop codon refined " + \
										str(a)+" codon downstream\n"
									break


					else: # *********************** Negative Strand
						if not cdsSeq[-3:]=="TGA" and not cdsSeq[-3:]=="TAA" and not cdsSeq[-3:]=="TAG":
							notes += "- Looking for stop codon downstream....\n"
							for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
								#print "New Stop codons"
								newStop = self.reverseComplement(genomeSeq[int(exon[locus][0][0])-1-a*3-3:int(exon[locus][0][0])-1-a*3])
								#print a,newStop
								if newStop == "TAA" or newStop=="TGA" or newStop=="TAG":
									notes += "Valid stop codon found downstream\n"
									exon[locus][0]=(int(exon[locus][0][0])-a*3,exon[locus][0][1],exon[locus][0][2])
									gene[locus] =(int(exon[locus][0][0])-a*3, int(gene[locus][1]),gene[locus][2])
									cdsSeq = ""
									for b in range(len(exon[locus])-1,-1,-1):
										cdsSeq+=self.reverseComplement(genomeSeq[ int(exon[locus][b][0])-1: int(exon[locus][b][1]) ])
									foundStopCodon = True
									notes += "- Stop codon refined " + \
										str(a)+" codon(s) downstream\n"
									break



				if foundStartCodon == True and foundStopCodon == True and numCodonRefines <5 and abs(int(len(cdsSeq)/3) - len(sequence)) <10 : # Write gff and cds file ********************
					#warnFile.write("A valid ORF for gene "+locus+" after prediction refinement\n")
					if  notes == "":
						notes = "A valid ORF has been found for gene "+locus+"!\n"
					else:
						notes += "A valid ORF has been found for gene "+locus+"!\n"
					gffNote = ""
					#  ******************* Check CDS integrity
					cdsGood = True
					plausablePrediction = True
					for a in range(0,len(cdsSeq)-3,+3):
						if cdsSeq[a:a+3] == "TAA" or cdsSeq[a:a+3] == "TGA" or cdsSeq[a:a+3] == "TAG":
							# Check if the shorter sequence is compatible with one of the models
							newProtLen = float(a)/3.0
							plausablePrediction = False
							newProt = Seq(cdsSeq[:a+3]).translate()
							for protein in protSeqs:
								score = pairwise2.align.localxx(newProt, protSeqs[protein].seq,score_only=True)
								if score / float(len(protSeqs[protein].seq)) >= 0.8:
									plausablePrediction = True
									if exon[locus][0][2]=="+":  #Check it if the strand is positive
										newmRNALength = 0
										newExonSet = {}
										if not locus in newExonSet:
											newExonSet[locus] = []
										for item in exon[locus]:
											if int(item[1])-int(item[0]) + newmRNALength > a+3:
												newExonSet[locus].append((int(item[0]),int(item[0]) + a - newmRNALength -1 ,item[2]))
												exon[locus] = newExonSet[locus]
												gene[locus] = (int(gene[locus][0]),int(item[0]) + a - newmRNALength -1 ,gene[locus][2])
												break
											else:
												newmRNALength += int(item[1]) - int(item[0])
												newExonSet[locus].append((int(item[0]),int(item[1]),item[2]))
										cdsSeq = cdsSeq[:a+3]
									else:  #Check it if the strand is negative
										newmRNALength = 0
										newExonSet = {}
										if not locus in newExonSet:
											newExonSet[locus] = []
										for a in range(len(exon[locus])-1,-1,-1):
											if int(exon[locus][a][1])-int(exon[locus][a][0]) + newmRNALength > a+3:
												newExonSet[locus].append((int(exon[locus][a][1]) - a  + newmRNALength, int(exon[locus][a][1]),exon[locus][a][2]))
												#print "Previous exon locus",exon[locus]
												exon[locus] = newExonSet[locus]
												#print "after exon locus",exon[locus]
												#print gene[locus]
												#gene[locus] = (int(exon[locus][a][1]) - a  + newmRNALength, int(gene[locus][1]), gene[locus][2])
												break

											else:
												newmRNALength = int(exon[locus][a][1]) - int(exon[locus][a][0])
												newExonSet[locus].append((int(exon[locus][a][0]),int(exon[locus][a][1]),exon[locus][a][2]))
										cdsSeq = cdsSeq[:a+3]
										#print exon[locus][0][1]
										exon[locus][0] = (exon[locus][0][0], exon[locus][0][1]-6,exon[locus][0][2])
										#print exon[locus][0][1]
									break
								else:
									plausablePrediction = False

							if plausablePrediction == False:
								break


					if plausablePrediction == False:
						cdsGood = False
						gffNote = "note=Stop codon interrupts coding sequence. "
						notes += "- The coding sequence is interrupted by a stop codon\n"


					if not len(cdsSeq)%3 == 0:
						cdsGood = False
						notes += "- The coding sequence length is not multiple of 3\n"
						if not gffNote == "" :
							gffNote = "note= The coding sequence length is not multiple of 3"
						else:
							gffNote +=". The coding sequence length is not multiple of 3"



					if cdsGood == True:  # CDS passed quality check
						if exon[locus][0][2]=="+":   #************* Positive strand
							gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(exon[locus][0][0]))+"\t"+str(int(exon[locus][-1][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+"\n")
							gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(exon[locus][0][0]))+"\t"+str(int(exon[locus][-1][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+"\n")
							numExon = 1
							for item in exon[locus]:
								if item == exon[locus][-1]: #If this is the last exon include the stop codon in the coordinates
									gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(item[0])+"\t"+str(int(item[1])+3)+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
								else:
									gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
								numExon += 1
							cdsFile.write(">"+locus+" +\n"+cdsSeq+"\n")


						else: # *********************** Negative Strand
							gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(exon[locus][-1][1]))+"\t"+str(int(exon[locus][0][0]))+"\t.\t"+str(gene[locus][2])+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+"\n")
							gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(exon[locus][-1][1]))+"\t"+str(int(exon[locus][0][0]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+"\n")
							numExon = 1
							for item in exon[locus]:
								if item == exon[locus][0]:# and len(exon[locus]) == 1: #If this is the first exon include the stop codon in the coordinates
									gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(int(item[0])-3)+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
								else:
									gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
								numExon += 1
							cdsFile.write(">"+locus+" -\n"+cdsSeq+"\n")
						
						

					else: # CDS DID NOT passed quality check
						#warnFile.write(notes+"\n")
						gffNote += "Pseudo "
						if exon[locus][0][2]=="+":   #************* Positive strand
							gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(gene[locus][0]))+"\t"+str(int(gene[locus][1])+3)+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+";Note:"+gffNote+"\n")
							gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(gene[locus][0]))+"\t"+str(int(gene[locus][1])+3)+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
							numExon = 1
							for item in exon[locus]:
								gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
								numExon += 1
							cdsFile.write(">"+locus+" + Note: "+gffNote+"\n"+cdsSeq+"\n")


						else: # *********************** Negative Strand
							gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(gene[locus][0])-3)+"\t"+str(int(gene[locus][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+";"+gffNote+"-gene\n")
							gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(gene[locus][0])-3)+"\t"+str(int(gene[locus][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
							numExon = 1
							for item in exon[locus]:
								gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
								numExon += 1
							cdsFile.write(">"+locus+" - Note: "+gffNote+"\n"+cdsSeq+"\n")

						

					warnFile.write(notes+"\n")




				else:
				#if foundStartCodon == False or foundStopCodon == False or abs(int(len(cdsSeq)/3) - len(sequence))>10:
					notes += "The prediction was not successfull! Now attempting a refinement....\n"
					
					self.logArea.append("Annotation needs refinement....\n")
					self.logArea.repaint()
					
					
					
					print("Annotation needs refinement")
					exResult.close()
					#  ***************************************************************************
					#  ************************* Annotation refinement ***************************
					#  ***************************************************************************


					os.system(installationDirectory+"src/conda/bin/exonerate --model protein2genome tempFasta.fasta "+genomeName+" --showtargetgff -s 0 -n 1 --refine full --forcegtag --minintron 35 --maxintron 10000 >outputExonerate")

					#Check Exonerate output *****************************************************************
					#Check the proteins gave a match in the target genome
					exResult = open("outputExonerate")
					line = exResult.readline().rstrip()
					while not "Query range:" in line:
						line = exResult.readline().rstrip()
						if line is None:
							print("WARNING no protein found for ", locus)
							warnings.append(
								"Missing gene: locus "+locus+" did not provide any alignment")
					exResult.close()

					#Reconstruct Exons  **********************************************************************
					exResult = open("outputExonerate")
					while not line == "# --- START OF GFF DUMP ---":
						line = exResult.readline().rstrip()
						if line is None:
							#print "WARNING no protein found for ", locus
							warnings.append(
								"Missing gene: locus "+locus+" did not provide any alignment")
					for a in range(10):
						line = exResult.readline().rstrip()

					gene = {}
					exon = {}
					warnings = []
					#Collect the exonerate output
					while not line == "# --- END OF GFF DUMP ---":
						line = exResult.readline().rstrip()
						if line is None:
							#print "WARNING no protein found for ", locus
							warnings.append(
								"Missing gene: locus "+locus+" did not provide any alignment")
						fields = line.split("\t")
						if not line == "# --- END OF GFF DUMP ---":
							if fields[2] == "gene":
								if not locus in gene:
									gene[locus] = (
										fields[3], fields[4], fields[6])
								else:
									if (int(fields[4]) - int(fields[3])) > (int(int(gene[locus][1])) - int(int(gene[locus][0]))):
										gene[locus] = (
											fields[3], fields[4], fields[6])

							if fields[2] == "exon":
								if not locus in exon:
									exon[locus] = []
								exon[locus].append(
									(fields[3], fields[4], fields[6]))
								if "frameshifts" in fields[8]:
									warnings.append(
										"Frameshifts in exon "+str(fields[3])+" "+str(fields[4])+" "+fields[8])

					newList = sorted(exon[locus], key=lambda x: x[1])
					exon[locus] = newList

					#Reconstruct CDS  ***********************************************************
					cdsSeq = ""
					if exon[locus][0][2] == "+":  # ************* Positive strand
						for item in exon[locus]:
							cdsSeq += genomeSeq[int(item[0]) -
												1:int(item[1])]
						cdsSeq += genomeSeq[int(item[1]):int(item[1])+3]

					else:  # *********************** Negative Strand
						for a in range(len(exon[locus])-1, -1, -1):
							cdsSeq += self.reverseComplement(
								genomeSeq[int(exon[locus][a][0])-1: int(exon[locus][a][1])])
						cdsSeq += self.reverseComplement(
							genomeSeq[int(exon[locus][a][0])-4:int(exon[locus][a][0])-1])



					# Check CDS integrity *********************************************************
					foundStartCodon = True
					foundStopCodon = True
					if not cdsSeq[:3] == "ATG" or not (cdsSeq[-3:] == "TGA" or cdsSeq[-3:] == "TAA" or cdsSeq[-3:] == "TAG"):


						notes += "Either the start or the stop codon was not found. Searching nearby....\n"

						# Look for ATG at the beginning of the sequence or closely ********************
						if exon[locus][0][2] == "+":  # ************* Positive strand
							if not cdsSeq[:3] == "ATG":
								foundStartCodon = False
								print("- Looking for start codon upstream....\n")
								for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
									newStart = genomeSeq[int(
										exon[locus][0][0])-1-a*3-3:int(exon[locus][0][0])-1-a*3]
									if newStart == "ATG":
										notes += "Valid start codon found upstream!\n"
										exon[locus][0] = (
											int(exon[locus][0][0])-a*3-3, exon[locus][0][1], exon[locus][0][2])
										gene[locus] = (
											int(exon[locus][0][0])-a*3-3, int(gene[locus][1]), gene[locus][2])
										cdsSeq = ""
										for item in exon[locus]:
											cdsSeq += genomeSeq[int(
												item[0])-1:int(item[1])]
										foundStartCodon = True
										notes += "- Start codon refined  " + \
											str(a)+" codons upstream\n"
										numCodonRefines = a
										break
									if newStart == "TGA" or newStart == "TAA" or newStart == "TAG":
										foundStartCodon = False
										notes += "- Found a stop codon while searching for start codon upstream!\nStart codon could not be found upstream\n"
										break
								#If the new start codon was not found in the region upstream then the downstream region is searched
								if foundStartCodon == False:
									notes += "- Looking for start codon downstream....\n"
									for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
										newStart = genomeSeq[int(
											exon[locus][0][0])-1+a*3+3:int(exon[locus][0][0])-1+a*3]
										if newStart == "ATG":
											notes += "Valid start codon found downstream!\n"
											exon[locus][0] = (
												int(exon[locus][0][0])+a*3+3, exon[locus][0][1], exon[locus][0][2])
											gene[locus] = (
												int(exon[locus][0][0])+a*3+3, int(gene[locus][1]), gene[locus][2])
											cdsSeq = ""
											for item in exon[locus]:
												cdsSeq += genomeSeq[int(
													item[0])-1:int(item[1])]
											foundStartCodon = True
											notes += "- Start codon refined  " + \
												str(a) + \
												" codons upstream\n"
											numCodonRefines = a
											break
										if newStart == "TGA" or newStart == "TAA" or newStart == "TAG":
											foundStartCodon = False
											notes += "- Found a stop codon while searching for start codon downstream!\nStart codon could not be found downstream\n"
											break

						else:  # *********************** Negative Strand
							# RL6 start with alternative start codon
							if not cdsSeq[:3] == "ATG" or not (cdsSeq[:3] == "TTG" and locus == "RL6"):
								foundStartCodon = False
								notes += "- Looking for start codon upstream....\n"
								for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
									#print "New start codons"
									newStart = self.reverseComplement(
										genomeSeq[int(exon[locus][-1][1])+a*3:int(exon[locus][-1][1])+a*3+3])
									#print newStart
									if newStart == "ATG":
										notes += "Valid start codon found upstrean!\n"
										exon[locus][-1] = (int(exon[locus][-1][0]), int(
											exon[locus][-1][1])+a*3+3, exon[locus][-1][2])
										gene[locus] = (int(gene[locus][0]), int(
											exon[locus][-1][1])+a*3+3, gene[locus][2])
										cdsSeq = ""
										for a1 in range(len(exon[locus])-1, -1, -1):
											cdsSeq += self.reverseComplement(
												genomeSeq[int(exon[locus][a1][0])-1: int(exon[locus][a1][1])])
										foundStartCodon = True
										notes += "- Start codon refined  " + \
											str(a)+" codons upstream\n"
										numCodonRefines = a
										break
									if newStart == "TGA" or newStart == "TAA" or newStart == "TAG":
										foundStartCodon = False
										notes += "- Found a stop codon while searching for start codon upstream!\nStart codon could not be found upstream\n"
										break
							#If the new start codon was not found in the region upstream then the downstream region is searched
								if foundStartCodon == False:
									notes += "- Looking for start codon downstream....\n"
									for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
										#print "New start codons"
										newStart = self.reverseComplement(genomeSeq[int(exon[locus][-1][1])-a*3-3:int(exon[locus][-1][1])-a*3])
										#print newStart
										if newStart == "ATG":
											notes += "Valid start codon found dowstream!\n"
											exon[locus][-1] = (int(exon[locus][-1][0]), int(exon[locus][-1][1])-a*3, exon[locus][-1][2])
											gene[locus] = (int(gene[locus][0]), int(
												exon[locus][-1][1])-a*3-3, gene[locus][2])
											cdsSeq = ""
											for a1 in range(len(exon[locus])-1, -1, -1):
												cdsSeq += self.reverseComplement(
													genomeSeq[int(exon[locus][a1][0])-1: int(exon[locus][a1][1])])
											foundStartCodon = True
											notes += "- Start codon refined  " + \
												str(a) + \
												" codons dowstream\n"
											numCodonRefines = a
											break
										if newStart == "TGA" or newStart == "TAA" or newStart == "TAG":
											foundStartCodon = False
											notes += "- Found a stop codon while searching for start codon downstream! \nStart codon could not be found downstream\n"
											break
								if foundStartCodon == False:
									notes += "Start codon could not be found at this stage\n"


						# Look for Stop codon at the end of the sequence or closely ********************
						if exon[locus][0][2] == "+":  # ************* Positive strand
							if not cdsSeq[-3:] == "TGA" and not cdsSeq[-3:] == "TAA" and not cdsSeq[-3:] == "TAG":
								notes += "- Looking for stop codon downstream....\n"
								foundStopCodon = False
								for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
									newStop = genomeSeq[int(
										exon[locus][-1][1])+a*3:int(exon[locus][-1][1])+a*3+3]
									if newStop == "TAA" or newStop == "TGA" or newStop == "TAG":
										notes += "Valid stop codon found downstream!\n"
										exon[locus][0] = (int(exon[locus][0][0]), int(
											exon[locus][-1][1])+a*3, exon[locus][0][2])
										gene[locus] = (int(gene[locus][0]), int(
											exon[locus][-1][1])+a*3, gene[locus][2])
										cdsSeq = ""
										for item in exon[locus]:
											cdsSeq += genomeSeq[int(
												item[0])-1:int(item[1])]
										foundStopCodon = True
										notes += "- Stop codon refined " + \
											str(a) + \
											" codon downstream\n"
										break

						else:  # *********************** Negative Strand
							if not cdsSeq[-3:] == "TGA" and not cdsSeq[-3:] == "TAA" and not cdsSeq[-3:] == "TAG":
								foundStopCodon = False
								notes += "- Looking for stop codon downstream....\n"
								for a in range(len(sequence)-int(len(cdsSeq)/3)+30):
									#print "New Stop codons"
									newStop = self.reverseComplement(
										genomeSeq[int(exon[locus][0][0])-1-a*3-3:int(exon[locus][0][0])-1-a*3])

									if newStop == "TAA" or newStop == "TGA" or newStop == "TAG":
										notes += "Valid stop codon found downstream!\n"

										exon[locus][0] = (
											int(exon[locus][0][0])-a*3, exon[locus][0][1], exon[locus][0][2])
										gene[locus] = (
											int(exon[locus][0][0])-a*3, int(gene[locus][1]), gene[locus][2])

										cdsSeq = ""
										for b in range(len(exon[locus])-1, -1, -1):
											cdsSeq += self.reverseComplement(
												genomeSeq[int(exon[locus][b][0])-1: int(exon[locus][b][1])])
										foundStopCodon = True
										notes += "- Stop codon refined " + \
											str(a) + \
											" codon downstream\n"
										break

						warnFile.write(notes)#+"\n")

					# Write gff and cds file ********************
					if foundStartCodon == True and foundStopCodon == True and abs(int(len(cdsSeq)/3) - len(sequence)) <10:

						warnFile.write("A valid ORF for gene "+locus+" after prediction refinement!\n")
						if notes == "":
							notes = "A valid ORF for gene "+locus+" after prediction refinement!\n"
						else:
							notes += "A valid ORF has been found for gene "+locus+" after prediction refinement!\n"
						gffNote = ""
						#  ******************* Check CDS integrity
						cdsGood = True
						plausablePrediction = True

						for a in range(0, len(cdsSeq)-3, +3):
							plausablePrediction = True
							if cdsSeq[a:a+3] == "TAA" or cdsSeq[a:a+3] == "TGA" or cdsSeq[a:a+3] == "TAG":
								# Check if the shorter sequence is compatible with one of the models
								newProtLen = float(a)/3.0
								plausablePrediction = False
								newProt = Seq(cdsSeq[:a+3]).translate()
								for protein in protSeqs:
									score = pairwise2.align.localxx(newProt, protSeqs[protein].seq,score_only=True)
									if score / float(len(protSeqs[protein].seq)) >= 0.8:
										plausablePrediction = True
										# Check it if the strand is positive
										if exon[locus][0][2] == "+":
											newmRNALength = 0
											newExonSet = {}
											if not locus in newExonSet:
												newExonSet[locus] = []
											for item in exon[locus]:
												if int(item[1])-int(item[0]) + newmRNALength > a+3:
													newExonSet[locus].append(
														(int(item[0]), int(item[0]) + a - newmRNALength - 1, item[2]))
													exon[locus] = newExonSet[locus]
													gene[locus] = (int(gene[locus][0]), int(
														item[0]) + a - newmRNALength - 1, gene[locus][2])
													break
												else:
													newmRNALength += int(
														item[1]) - int(item[0])
													newExonSet[locus].append(
														(int(item[0]), int(item[1]), item[2]))
											cdsSeq = cdsSeq[:a+3]
										else:  # Check it if the strand is negative
											newmRNALength = 0
											newExonSet = {}
											if not locus in newExonSet:
												newExonSet[locus] = []
											for a in range(len(exon[locus])-1, -1, -1):
												if int(exon[locus][a][1])-int(exon[locus][a][0]) + newmRNALength > a+3:
													newExonSet[locus].append(
														(int(exon[locus][a][1]) - a + newmRNALength, int(exon[locus][a][1]), exon[locus][a][2]))
													#print "Previous exon locus",exon[locus]
													exon[locus] = newExonSet[locus]
													#print "after exon locus",exon[locus]
													#print gene[locus]
													#gene[locus] = (int(exon[locus][a][1]) - a  + newmRNALength, int(gene[locus][1]), gene[locus][2])
													break

												else:
													newmRNALength = int(
														exon[locus][a][1]) - int(exon[locus][a][0])
													newExonSet[locus].append(
														(int(exon[locus][a][0]), int(exon[locus][a][1]), exon[locus][a][2]))
											cdsSeq = cdsSeq[:a+3]
											#print exon[locus][0][1]
											exon[locus][0] = (
												exon[locus][0][0], exon[locus][0][1]-6, exon[locus][0][2])
											#print exon[locus][0][1]
										break
									else:
										plausablePrediction = False

								if plausablePrediction == False:
									break




						if plausablePrediction==False:

							cdsGood = False
							gffNote = "note=Stop codon interrupts coding sequence. "
							notes += "- The coding sequence is interrupted by a stop codon\n"
							#break

						if not len(cdsSeq) % 3 == 0:
							cdsGood = False
							notes += "- The coding sequence length is not multiple of 3\n"
							if not gffNote == "":
								gffNote = "note= The coding sequence length is not multiple of 3"
							else:
								gffNote += ". The coding sequence length is not multiple of 3"

						if cdsGood == True:  # CDS passed quality check
							if exon[locus][0][2]=="+":   #************* Positive strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(exon[locus][0][0]))+"\t"+str(int(exon[locus][-1][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(exon[locus][0][0]))+"\t"+str(int(exon[locus][-1][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+"\n")
								numExon = 1
								for item in exon[locus]:
									if item == exon[locus][-1]: #If this is the last exon include the stop codon in the coordinates
										gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(item[0])+"\t"+str(int(item[1])+3)+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									else:
										gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" +\n"+cdsSeq+"\n")	


							else: # *********************** Negative Strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(exon[locus][-1][1])+3)+"\t"+str(int(exon[locus][0][0]))+"\t.\t"+str(gene[locus][2])+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(exon[locus][-1][1])+3)+"\t"+str(int(exon[locus][0][0]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+"\n")
								numExon = 1
								for item in exon[locus]:
									if item == exon[locus][0]:# and len(exon[locus]) == 1: #If this is the first exon include the stop codon in the coordinates
										gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(int(item[0])-3)+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									else:
										gffFile.write(assemblyName+"\texonerate\t"+"CDS"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" -\n"+cdsSeq+"\n")

							

						else: # CDS DID NOT passed quality check

							warnFile.write(notes+"\n")
							gffNote += "Pseudo "
							if exon[locus][0][2]=="+":   #************* Positive strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(gene[locus][0]))+"\t"+str(int(gene[locus][1])+3)+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+";Note:"+gffNote+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(gene[locus][0]))+"\t"+str(int(gene[locus][1])+3)+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
								numExon = 1
								for item in exon[locus]:
									gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" + Note: " +gffNote+"\n"+cdsSeq+"\n")


							else: # *********************** Negative Strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(gene[locus][0])-3)+"\t"+str(int(gene[locus][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+";Note:"+gffNote+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(gene[locus][0])-3)+"\t"+str(int(gene[locus][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
								numExon = 1
								for item in exon[locus]:
									gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" - Note: " +gffNote+"\n"+cdsSeq+"\n")



							

					else:
						warnFile.write("An incomplete ORF for gene "+locus+" after prediction refinement!\n")
						if notes == "":
							notes = "An incomplete ORF for gene "+locus+" after prediction refinement!\n"
						else:
							notes += "An imcoplete ORF has been found for gene "+locus+" after prediction refinement!\n"
						gffNote = ""
						#  ******************* Check CDS integrity
						cdsGood = True
						plausablePrediction = True
						for a in range(0, len(cdsSeq)-3, +3):
							if cdsSeq[a:a+3] == "TAA" or cdsSeq[a:a+3] == "TGA" or cdsSeq[a:a+3] == "TAG":
								# Check if the shorter sequence is compatible with one of the models
								newProtLen = float(a)/3.0
								plausablePrediction = False
								newProt = Seq(cdsSeq[:a+3]).translate()
								for protein in protSeqs:
									score = pairwise2.align.localxx(newProt, protSeqs[protein].seq,score_only=True)
									if score / float(len(protSeqs[protein].seq)) >= 0.8:
										plausablePrediction = True
										# Check it if the strand is positive
										if exon[locus][0][2] == "+":
											newmRNALength = 0
											newExonSet = {}
											if not locus in newExonSet:
												newExonSet[locus] = []
											for item in exon[locus]:
												if int(item[1])-int(item[0]) + newmRNALength > a+3:
													newExonSet[locus].append(
														(int(item[0]), int(item[0]) + a - newmRNALength - 1, item[2]))
													exon[locus] = newExonSet[locus]
													gene[locus] = (int(gene[locus][0]), int(
														item[0]) + a - newmRNALength - 1, gene[locus][2])
													break
												else:
													newmRNALength += int(
														item[1]) - int(item[0])
													newExonSet[locus].append(
														(int(item[0]), int(item[1]), item[2]))
											cdsSeq = cdsSeq[:a+3]
										else:  # Check it if the strand is negative
											newmRNALength = 0
											newExonSet = {}
											if not locus in newExonSet:
												newExonSet[locus] = []
											for a in range(len(exon[locus])-1, -1, -1):
												if int(exon[locus][a][1])-int(exon[locus][a][0]) + newmRNALength > a+3:
													newExonSet[locus].append(
														(int(exon[locus][a][1]) - a + newmRNALength, int(exon[locus][a][1]), exon[locus][a][2]))
													#print "Previous exon locus",exon[locus]
													exon[locus] = newExonSet[locus]
													#print "after exon locus",exon[locus]
													#print gene[locus]
													#gene[locus] = (int(exon[locus][a][1]) - a  + newmRNALength, int(gene[locus][1]), gene[locus][2])
													break

												else:
													newmRNALength = int(
														exon[locus][a][1]) - int(exon[locus][a][0])
													newExonSet[locus].append(
														(int(exon[locus][a][0]), int(exon[locus][a][1]), exon[locus][a][2]))
											cdsSeq = cdsSeq[:a+3]
											#print exon[locus][0][1]
											exon[locus][0] = (
												exon[locus][0][0], exon[locus][0][1]-6, exon[locus][0][2])
											#print exon[locus][0][1]
										break
						if plausablePrediction==False:
							cdsGood = False
							gffNote = "note=Stop codon interrupts coding sequence. "
							notes += "- The coding sequence is interrupted by a stop codon\n"


						if not len(cdsSeq) % 3 == 0:
							cdsGood = False
							notes += "- The coding sequence length is not multiple of 3\n"
							if not gffNote == "":
								gffNote = "note= The coding sequence length is not multiple of 3"
							else:
								gffNote += ". The coding sequence length is not multiple of 3"

						if cdsGood == True:  # CDS passed quality check
							if exon[locus][0][2]=="+":   #************* Positive strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(exon[locus][0][0]))+"\t"+str(int(exon[locus][-1][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(exon[locus][0][0]))+"\t"+str(int(exon[locus][-1][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+"\n")
								numExon = 1
								for item in exon[locus]:
									if item == exon[locus][-1]: #If this is the last exon include the stop codon in the coordinates
										gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(int(item[1])+3)+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									else:
										gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" +\n"+cdsSeq+"\n")


							else: # *********************** Negative Strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(exon[locus][-1][1])+3)+"\t"+str(int(exon[locus][0][0]))+"\t.\t"+str(gene[locus][2])+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(exon[locus][-1][1])+3)+"\t"+str(int(exon[locus][0][0]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+"\n")
								numExon = 1
								for item in exon[locus]:
									if item == exon[locus][0]:# and len(exon[locus]) == 1: #If this is the first exon include the stop codon in the coordinates
										gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(int(item[0])-3)+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									else:
										gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" -\n"+cdsSeq+"\n")

							

						else: # CDS DID NOT passed quality check
							warnFile.write(notes+"\n")
							gffNote += "Pseudo "
							if exon[locus][0][2]=="+":   #************* Positive strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(gene[locus][0]))+"\t"+str(int(gene[locus][1])+3)+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+";Note:"+gffNote+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(gene[locus][0]))+"\t"+str(int(gene[locus][1])+3)+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
								numExon = 1
								for item in exon[locus]:
									gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" + Note: " +gffNote+"\n"+cdsSeq+"\n")


							else: # *********************** Negative Strand
								gffFile.write(assemblyName+"\texonerate\t"+"gene"+"\t"+str(int(gene[locus][0])-3)+"\t"+str(int(gene[locus][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_gene;Name="+locus+";Product="+locus+";Note:"+gffNote+"\n")
								gffFile.write(assemblyName+"\texonerate\t"+"mRNA"+"\t"+str(int(gene[locus][0])-3)+"\t"+str(int(gene[locus][1]))+"\t.\t"+str(gene[locus][2])+"\t.\tID="+locus+"_mRNA;Parent="+locus+"_gene;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
								numExon = 1
								for item in exon[locus]:
									gffFile.write(assemblyName+"\texonerate\t"+"misc_feature"+"\t"+str(item[0])+"\t"+str(item[1])+"\t.\t"+str(item[2])+"\t.\tID="+locus+"_cds"+str(numExon)+";Parent="+locus+"_mRNA;Name="+locus+".1;Product="+locus+";Note:"+gffNote+"\n")
									numExon += 1
								cdsFile.write(">"+locus+" - Note: " +gffNote+"\n"+cdsSeq+"\n")



			os.system("rm tempFasta.fasta outputExonerate outputBlast.txt -f")


			#Annotate lncRNA
			



			cdsFile.close()
			gffFile.close()
			warnFile.close()

			#Translate valid cds in proteins

			sequences = SeqIO.to_dict(SeqIO.parse(suffixName+"_cds.fasta","fasta"))

			for seq in sequences:
				if not "pseudo" in str(sequences[seq].description):
					protSeq = (sequences[seq].seq).translate()
					protFile.write(">"+str(sequences[seq].description)+"\n"+str(protSeq)+"\n")

			protFile.close()


			




			##refine gff file
			geneInfo = {}
			mRNAInfo = {}
			cdsInfo = {}
			cdsExons = {}
			geneCoord = {}
			geneDirection = {}
			exonCoordAll = {}

			inputFileGFF = suffixName+"_annotation.gff"

			infileGFF = open(inputFileGFF)
			line = infileGFF.readline()
			fields = line.split("\t")
			genomeName = fields[0]
			infileGFF.close()

			infileGFF = open(inputFileGFF)
			while True:
				line = infileGFF.readline().rstrip()
				if not line:
					break
				fields = line.split("\t")


				if fields[2] == "gene":
					infoField = fields[-1]
					if  infoField[:4]=="note":
						infoField = fields[-2]
					locus = ((infoField.split("ID="))[-1].split("_"))[0]
					if not locus in geneInfo:
						geneInfo[locus] = infoField

					if not locus in geneDirection:
						geneDirection[locus]  = (fields[5],fields[6],fields[7])



				if fields[2] == "mRNA":
					infoField = fields[-1]
					if infoField[:4]=="note":
						infoField = fields[-2]
					locus = ((infoField.split("ID="))[-1].split("_"))[0]
					if not locus in mRNAInfo:
						mRNAInfo[locus] = infoField


				if fields[2] == "CDS":
					infoField = fields[-1]
					if infoField[:4]=="note":
						infoField = fields[-2]
					locus = ((infoField.split("ID="))[-1].split("_"))[0]

					if not locus in cdsInfo:
						cdsInfo[locus] = []
					if int(fields[3]) > int(fields[4]):
						temp =  fields[3]
						fields[3] = fields[4]
						fields[4] = temp

					if not locus in exonCoordAll:
						exonCoordAll[locus] = []
					exonCoordAll[locus].append(int(fields[3]))
					exonCoordAll[locus].append(int(fields[4]))

					newCDSLine = ""
					for a in fields:
						newCDSLine +=a+"\t"

					cdsInfo[locus].append(newCDSLine)



				if fields[2] == "misc_feature":
					infoField = fields[-1]
					if infoField[:4]=="note":
						infoField = fields[-2]
					locus = ((infoField.split("ID="))[-1].split("_"))[0]


					if not locus in cdsInfo:
						cdsInfo[locus] = []
					if int(fields[3]) > int(fields[4]):
						temp =  fields[3]
						fields[3] = fields[4]
						fields[4] = temp

					if not locus in exonCoordAll:
						exonCoordAll[locus] = []
					exonCoordAll[locus].append(int(fields[3]))
					exonCoordAll[locus].append(int(fields[4]))

					newCDSLine = ""
					for a in fields:
						newCDSLine +=a+"\t"

					cdsInfo[locus].append(newCDSLine)

			#annotate lncRNA
			print("Ci arriva")
			os.system(installationDirectory+"/src/conda/bin/python "+installationDirectory+"/src/scripts/annotation/lncRNA_annotation.py -f "+installationDirectory+"/src/scripts/annotation/proteinDB/lncRNAs.fasta -i "+ file2Annotate+" -o lncRNA140875 -c "+installationDirectory+"/src/conda/")
			os.system("cat "+suffixName+"_cds.fasta lncRNA140875_lncrna_seqs.fasta > temp_cds.fasta")
			os.system("cat "+suffixName+"_annotation.gff lncRNA140875_lncrna_gff3.gff > temp_gff.gff" )
			os.system("mv temp_cds.fasta "+suffixName+"_cds.fasta")
			os.system("mv temp_gff.gff "+suffixName+"_annotation.gff")
			os.system("rm -rf lncRNA140875*")





			for cds in exonCoordAll:
				geneCoord[cds] = (min(exonCoordAll[cds]),max(exonCoordAll[cds]))

			#rewrite the gfffile
			outfile = open("temp140875.gff","w")
			for locus in geneCoord:
				outfile.write(genomeName+"\tGRACy\tgene\t"+str(geneCoord[locus][0])+"\t"+str(geneCoord[locus][1])+"\t")
				for item in geneDirection[locus]:
					outfile.write(item+"\t")
				outfile.write(geneInfo[locus]+"\n")

				if not "misc_feature" in cdsInfo[locus][0]:
					outfile.write(genomeName+"\tGRACy\tmRNA\t"+str(geneCoord[locus][0])+"\t"+str(geneCoord[locus][1])+"\t")
					for item in geneDirection[locus]:
						outfile.write(item+"\t")
					outfile.write(mRNAInfo[locus]+"\n")

				for cds in cdsInfo[locus]:
					outfile.write(cds+"\n")

			

			outfile.close()
			os.system("mv temp140875.gff "+suffixName+"_annotation.gff")
			os.system("mv "+suffixName+"* "+outputFolder)
			infileGFF.close()





	
		self.logArea.append("\n\nAnnotations completed!\n")
		self.logArea.repaint()

	def retranslateUi(self, Form):
		_translate = QtCore.QCoreApplication.translate
		Form.setWindowTitle(_translate("Form", "Annotation tool"))
		self.label.setText(_translate("Form", "Genomes to annotate"))
		self.label_2.setText(_translate("Form", "Output folder"))
		self.inputFileButton.setText(_translate("Form", "Select files"))
		self.outputFolderButton.setText(_translate("Form", "Open folder"))
		self.label_3.setText(_translate("Form", "Log area"))
		self.runButton.setText(_translate("Form", "Run"))


if __name__ == "__main__":
	import sys
	app = QtWidgets.QApplication(sys.argv)
	Form = QtWidgets.QWidget()
	installationDirectory = sys.argv[1]
	ui = Ui_Form()
	ui.setupUi(Form,installationDirectory)
	Form.show()
	sys.exit(app.exec_())

